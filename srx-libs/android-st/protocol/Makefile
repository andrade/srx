SRX_ASN1C_BIN ?= asn1c
ASN1C ?= $(SRX_ASN1C_BIN)

NORMAL_TARGET ?= libasn1proto-normal.a
SECURE_TARGET ?= libasn1proto-secure.a

NORMAL_CFLAGS := -I. -Iasn1c \
		-D ENABLE_ENCLAVE_ASNONE_CODE=0 \
		-Wall -Wextra -fPIC $(CFLAGS)
SECURE_CFLAGS := -I. -Iasn1c -Ilinux -Isgx \
		-D ENABLE_ENCLAVE_ASNONE_CODE=1 \
		-include "sgx/sgx_void.h" \
		-I$(SGX_SDK)/include \
		-Wall -Wextra -fPIC $(CFLAGS)

# Support files (skeletons) of asn1c
ASN_MODULE_SOURCES := $(wildcard asn1c/*.c)
ASN_MODULE_HEADERS := $(wildcard asn1c/*.h)

# Linux dependencies not available inside enclave
ASN_MODULE_SOURCES += $(wildcard linux/*.c)
ASN_MODULE_HEADERS += $(wildcard linux/*.h)

# Further workarounds to work with SGX
ASN_MODULE_SOURCES += $(wildcard sgx/*.c)
ASN_MODULE_HEADERS += $(wildcard sgx/*.h)

# Output (ASN.1 tables) of asn1c
ASN_MODULE_SOURCES += $(wildcard *.c)
ASN_MODULE_HEADERS += $(wildcard *.h)

#OBJS := ${ASN_MODULE_SOURCES:.c=.o}
NORMAL_OBJS := ${ASN_MODULE_SOURCES:%.c=%_normal.o}
SECURE_OBJS := ${ASN_MODULE_SOURCES:%.c=%_secure.o}
#NORMAL_OBJS := $(patsubst %.c,%_normal.o,$(ASN_MODULE_SOURCES))
#SECURE_OBJS := $(patsubst %.c,%_secure.o,$(ASN_MODULE_SOURCES))

all: $(NORMAL_TARGET) $(SECURE_TARGET)

$(NORMAL_OBJS): %_normal.o: %.c
	$(CC) $(NORMAL_CFLAGS) -o $@ -c $<

$(SECURE_OBJS): %_secure.o: %.c
	$(CC) $(SECURE_CFLAGS) -o $@ -c $<

$(NORMAL_TARGET): $(NORMAL_OBJS)
	ar rcs $@ $^

$(SECURE_TARGET): $(SECURE_OBJS)
	ar rcs $@ $^

.PHONY: clean generate

clean:
	rm -f $(NORMAL_TARGET) $(NORMAL_OBJS)
	rm -f $(SECURE_TARGET) $(SECURE_OBJS)
	rm -f *.c *.h  # files generated by asn1c

# Generates (only) ASN.1 tables based on skeleton files in `asn1c` subdir
generate:
	$(ASN1C) -R -S asn1c *.asn1

# Check schemas
validate:
	$(ASN1C) -EF -S asn1c *.asn1
