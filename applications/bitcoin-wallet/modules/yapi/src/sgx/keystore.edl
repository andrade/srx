/**
 * Provides access to a keystore for bitcoin keys.
 *
 * The wallet generates a single seed for the derivation of other keys.
 * The seed and private keys never leave the TEE.
 * The interface allows the untrusted code to request public keys to
 * build transactions. The transactions can only be signed within the TEE.
 *
 * This is a rudimentary keystore and there is no notion of a balance.
 * The unstrusted code can request public keys hence it can find out the
 * balance of the user by using that information to scan the blockchain.
 * Privacy could be increased by having more code in the TEE, but
 * at least for now privacy is not the goal of this system.
 */
enclave {

	from "sgx_tprotected_fs.edl" import *;
	from "sgx_tsgxssl.edl" import *;

	from "srx.edl" import *;

	from "usgx/util.edl" import *;

	trusted {

		include "stdint.h"

		/**
		 * Loads a serialized and encrypted wallet to the enclave.
		 *
		 * A new wallet is created when data is null, which
		 * implicitly generates a HD master seed for the wallet.
		 */
		public int ecall_yapi_wallet_load([in, string] const char *srx_path,
				[in, size=sd_size] const uint8_t *sealed_data,
				uint32_t sd_size);

		/**
		 * Compute buffer size.
		 *
		 * Returns the minimum size for a buffer capable of
		 * storing the encrypted enclave state.
		 * Returns `0xFFFFFFFF` on error.
		 */
		public uint32_t ecall_yapi_wallet_compute_size();

		/**
		 * Requests an encrypted copy of the enclave state.
		 *
		 * The caller must use a buffer size large enough to store the
		 * serialized and encrypted enclave state.
		 * The function `ecall_yapi_wallet_compute_size` returns the
		 * minimum size needed for the buffer.
		 *
		 * Returns zero on success, non-zero otherwise.
		 */
		public int ecall_yapi_wallet_fetch_state([out, size=sd_size] uint8_t *sealed_data, uint32_t sd_size);

		/**
		 * Derives a private key from the given derivation path, and
		 * places the corresponding P2PKH in `p2pkh`.
		 *
		 * Returns zero on success, non-zero otherwise.
		 */
		public int ecall_yapi_derive_key_to_p2pkh([in, string] const char *dp, [out, size=112] char *p2pkh);

		/**
		 * Signs the transaction with the private key of a given input.
		 *
		 * ia_dp: derivation path of the input
		 * input_pos: input position in the `vin` vector on the TX
		 *
		 * Returns zero on success, non-zero otherwise.
		 */
		 public int ecall_yapi_sign_tx(
			 [in, size=tx_tosign_len] const uint8_t *tx_tosign,
			 uint32_t tx_tosign_len,
			 [in, string] const char *ia_dp,
			 int input_pos,
			 uint64_t ia_amount,
			 [out, size=900] uint8_t *tx_signed,
			 [out] uint32_t *tx_signed_len
		 );
	};

	untrusted {

		void ocall_yapi_print([in, string] const char *s);
	};
};
